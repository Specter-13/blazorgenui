@using BlazorGenUI.Reflection.ValueElementTypes

<div class="list-group">
    @RenderItem()
</div>


@code {
    [Parameter]
    public ArrayElement ArrayElement { get; set; }

    [Parameter]
    public string NavigationPrefix { get; set; }

    [Parameter]
    public string NavigationPropertyName { get; set; }
    [Parameter]
    public string DisplayedPropertyName { get; set; }

    public IEnumerable<IBaseElement> Items { get; set; }


    public RenderFragment RenderItem() => __builder =>
    {
        Items = ArrayElement.GetItems();
        @foreach (var item in Items)
        {
            if (item is IComplexElement complex)
            {
                var selectedChild = GetValueElementByRawName(complex, DisplayedPropertyName);
                var id = GetValueElementByRawName(complex, NavigationPropertyName);
                if (selectedChild is IValueElement valueElement && id is IValueElement valueId)
                {
                    var href = $"{NavigationPrefix}{valueId.RawData}";
                    <a href="@href" class="list-group-item list-group-item-action">@valueElement.RawData</a>
                }
            }
        }
    };


    private IBaseElement GetValueElementByRawName(IComplexElement item, string rawName)
    {

        return item.GetChildren().First(x => x.RawName == rawName);

    }


}
